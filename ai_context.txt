# Контекст проекта: ESP32-C3 + ST7735 + графическая система виджетов (PlatformIO)

## Архитектура проекта

Проект реализует компактную систему пользовательского интерфейса для дисплея ST7735 на базе ESP32-C3. Вся графика рендерится в буферы `GFXcanvas16`, которые затем выводятся на экран через `tft.drawRGBBitmap(...)`. Текст отрисовывается с помощью `U8G2_FOR_ADAFRUIT_GFX`, поддерживающего кириллицу.

### Widget (widget.h)
- Абстрактный базовый класс для всех визуальных компонентов (виджетов)
- Хранит размер, ID, цвет фона
- Использует `CanvasFactory` для получения кешированного `GFXcanvas16`
- Методы:
  - `render()` — чисто виртуальный, должен реализовываться в потомках
  - `drawTo(display, x, y)` — вызывает `render()`, очищает область и рисует канвас на дисплей
  - `getCanvas()` — возвращает буфер для текущего виджета

### Gauge (gauge.h)
- Наследник `Widget`
- Отображает полукруглый gauge-индикатор со шкалой от 0 до 100%
- Цвет шкалы плавно переходит от зелёного к жёлтому и красному
- Показывает:
  - Подпись (label)
  - Значение (value)
  - Процент (percent)
- Использует `U8G2_FOR_ADAFRUIT_GFX` для вывода текста

### CanvasFactory (canvas_factory.h)
- Класс с единственным методом `get(id, w, h)`
- Хранит map<String, GFXcanvas16*> для кеширования буферов по ID
- Используется всеми виджетами для переиспользования буферов без повторного выделения памяти

---

## Назначение файлов

### main.cpp
- Точка входа
- Создаёт объекты `Gauge`, обновляет значения, отрисовывает через `drawTo()`
- Работает с `Adafruit_ST7735` (SPI дисплей)

### widget.h
- Базовый класс `Widget`
- Содержит `render()` (виртуальный), `drawTo()`, `getCanvas()`
- Управляет ID и цветом фона виджета

### gauge.h
- Класс `Gauge` реализует визуальный индикатор
- Рендерит графику и текст в буфер через Adafruit_GFX и U8g2

### canvas_factory.h
- Хранит и возвращает указатели на `GFXcanvas16` по строковому ID
- Предотвращает повторное выделение памяти для виджетов

---

## Используемые библиотеки

- `Adafruit_GFX` — базовая графическая библиотека
- `Adafruit_ST7735` — драйвер дисплея
- `U8g2_for_Adafruit_GFX` — отрисовка текста с поддержкой расширенных шрифтов и кириллицы

---

## Отрисовка и обновление экрана

1. Виджет получает данные (`update(...)`)
2. Вызывается `drawTo(tft, x, y)`:
   - Внутри `render()` — отрисовка gauge, текста и фона
   - Область `(_w x _h)` предварительно очищается заданным `_bgColor`
   - Буфер `GFXcanvas16` передаётся на экран через `tft.drawRGBBitmap(...)`

Буферы не создаются повторно — они кешируются фабрикой по ID.

---

## Цветовая модель

Используется RGB565 (16-битный цвет), макрос:
```cpp
#define COLOR(r, g, b) (((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3))
```

Фон каждого виджета задаётся при создании через параметр `bgColor`, по умолчанию — чёрный (`0`).

---

## Как добавить новый виджет

1. Создать класс-наследник `Widget`:
```cpp
class MyWidget : public Widget {
  ...
  void render() override {
    GFXcanvas16& canvas = getCanvas();
    canvas.fillScreen(_bgColor);
    // отрисовка примитивов, текста и т.п.
  }
};
```

2. Использовать в `main.cpp`:
```cpp
MyWidget w(100, 40);
w.drawTo(tft, 0, 0);
```

---

 